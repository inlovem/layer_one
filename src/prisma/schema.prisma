datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id             String           @id @default(cuid())
  ghlUserId         String?          @unique
  ghlLocationId     String?
  ghlCompanyId      String?
  userName       String?
  firstName      String?
  lastName       String?
  email          String?          @unique
  password       String?
  phone          String?
  extension      String?
  type           String?
  role           String?
  isEjectedUser  Boolean?
  locationIds    String[]
  permissions    Json?            // Added to store permissions object
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  searchHistory  Search[]         @relation("UserSearch")
  locations      Location[]
  LocationMember LocationMember[]
  locale         String?
  favorites      Favorite[]       @relation("UserFavorites")
}

model Location {
  id              String           @id @default(cuid())
  ghlAppId           String?
  name            String
  email           String?
  ghlLocationId      String? @unique
  phone           String?
  ghlCompanyId       String
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  stripeProductId String ?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         LocationMember[]
  User            User?            @relation(fields: [userId], references: [id])
  userId          String?
  carriercontacts CarrierContact[] @relation("LocationToContacts")
}

enum Role {
  owner
  admin
  member
}

model LocationMember {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  roles      Role[]
}


model Contact {
  id           String     @id @default(cuid())
  ghlLocationId   String?
  ghlUserId       String?    @unique // For GoHighLevel ID
  ghlContactId    String?    @unique
  ghlAppId        String?
  address1      String?
  city         String?    // GoHighLevel field 
  companyName  String?    // GoHighLevel field
  country      String?    // GoHighLevel field
  dateAdded    String?
  dateOfBirth  String?
  dnd          Boolean?   @default(false) // GoHighLevel field
  email        String    @unique 
  name         String
  firstName    String?    // GoHighLevel field
  lastName     String?    // GoHighLevel field
  phone        String?
  title        String?
  linkedInUrl  String?
  tags         String[]?   // GoHighLevel field
  website      String?
  attachments  String[]?
  assignedTo   String?
  customFields Json?      // GoHighLevel field
  dateAdded    DateTime?  // GoHighLevel field
  private      Boolean    @default(false)
  location     Location?   @relation("LocationToContacts", fields: [locationId], references: [locationId])
  locationId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
}


model AreaCode {
  id                 Int     @id @default(autoincrement())
  state              String
  npa                String
  rateCenterAbbr     String
  rateCenterFullName String
  lata               String
  npaComplex         String
  fccTop100MsaName   String?
  poolingStatus      String
}

model Favorite {
  id        String   @id @default(cuid())
  contactId String?
  user      User     @relation("UserFavorites", fields: [userId], references: [userId])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?
  @@index([userId, carrierId])
}

model Token {
  id                String   @id @default(cuid())
  access_token      String?
  token_type        String   @default("Bearer ")
  expires_in        Int
  refresh_token     String?
  userId            String?
  approvedLocations String[]
  scope             String?
  userType          String?
  locationId        String?
  companyId         String?
  planId            String?
  updatedAt         DateTime @default(now()) @updatedAt
}



model Note {
  id String @default(cuid())
  ghlLocationId String
  ghlId String
  ghlContactId String
  locationId String
  contactId String
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}